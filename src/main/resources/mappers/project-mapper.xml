<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Project">
	<select id="stateNoneCount" resultType="integer">
		select count(seq) from project where state='N'
	</select>

	<select id="getList" resultType="kh.hello.dto.ProjectChartDTO">
	select * from
	(select seq, title, location1, location2, capacity, startDate, endDate, languages, writer, id, state, nonTagContents, nvl(scrap,0) from project p
	left outer join (select categorySeq, count(*) as scrap from scrap where id=#{id} and category='project' group by categorySeq) s on s.categorySeq=p.seq where state = 'N')	
		<if test="searchOption!=null">
			<include refid="search"></include>
		</if>
		order by
		<choose>
			<when test="pageOrder == 'seq'">
				seq desc
			</when>
			<when test="pageOrder == 'startDate'">
				startDate asc
			</when>
		</choose> 	
	</select>
	
	
	
	<select id="checkForcedCloseProject" resultType="integer">
		select seq from project where startDate = #{value} and state = 'N'
	</select>
	<update id="letProjectClose">
		update project set state = 'Y' where seq = #{value}
	</update>
	
	<select id="getArticleCount" resultType="integer">
		select count(*) from project
			<choose>
				<when test="pageOrder == 'startDate'">
					where state = 'N'
					<if test="searchOption!=null">
						<include refid="searchAnd"></include>
					</if>
				</when>
				<otherwise>
					<if test="searchOption!=null">
						<include refid="search"></include>
					</if>
				</otherwise>
			</choose>				
	</select>

	<select id="getListByPage" resultType="kh.hello.dto.ProjectDTO">
		select * from 
		(select seq, title, location1, location2, capacity, startDate, endDate, languages, writer, id, writeDate, state, viewCount, nonTagContents, nvl(commentCount,0) as commentCount, nvl(imageCount,0) as imageCount, 
		row_number() over (order by 		
		<choose>
			<when test="pageOrder == 'seq'">
				seq desc
			</when>
			<when test="pageOrder == 'startDate'">
				startDate asc
			</when>
		</choose>				
		) as num from project p
		left outer join (select projectSeq, count(*) as commentCount from projectComment where contents is not null group by projectSeq) pc on pc.projectSeq=p.seq
		left outer join (select projectSeq, count(*) as imageCount from projectImage group by projectSeq) pi on pi.projectSeq=p.seq
		<choose>
			<when test="pageOrder == 'startDate'">
				where state = 'N'
				<if test="searchOption!=null">
					<include refid="searchAnd"></include>
				</if>
			</when>
			<otherwise>
				<if test="searchOption!=null">
					<include refid="search"></include>
				</if>
			</otherwise>
		</choose>		
		) where num between #{start} and #{end}	
	</select>
	
	<sql id="search">
		<choose>
			<when test="searchOption=='all'">
				where lower(title) like lower('%'||#{keyword}||'%')
				or lower(nonTagContents) like lower('%'||#{keyword}||'%')
			</when>
			<when test="searchOption=='location'">
				where location1 like '%'||#{keyword}||'%'	
				or location2 like '%'||#{keyword}||'%'
			</when>
			<otherwise>
				where lower(${searchOption}) like lower('%'||#{keyword}||'%')
			</otherwise>
		</choose>
	</sql>
	
	<select id="getProjectDetailView" resultType="kh.hello.dto.ProjectDTO">
		select * from 
		(select project.*, profileImg, 
		(select count(*) from projectApply where projectSeq=project.seq and approve in('W')) as applyCount,
		(select count(*) from projectImage where projectSeq=project.seq) as imageCount,
		(select count(*) from projectComment where contents is not null and projectSeq=project.seq) as commentCount from project inner join member on project.seq=#{value} and project.id = member.id)
	</select>	
	<select id="latestSeq" resultType="integer">
		select max(seq) from project where id=#{value}
	</select>	
	<insert id="insertProject" parameterType="kh.hello.dto.ProjectDTO">
		insert into project values(projectSeq.nextval,#{title},#{contents},#{location1},#{location2},#{capacity},#{startDate},#{endDate},#{languages},#{phone},#{email},#{writer},#{id},sysdate,null,'N',0,#{nonTagContents})
	</insert>	
	<update id="updateProject" parameterType="kh.hello.dto.ProjectDTO">
		update project set title=#{title}, contents=#{contents}, location1=#{location1}, location2=#{location2}, capacity=#{capacity}, startDate=#{startDate}, endDate=#{endDate}, languages=#{languages}, phone=#{phone}, email=#{email}, writer=#{writer}, changeDate=sysdate, nonTagContents=#{nonTagContents} where seq=#{seq}
	</update>	
	<select id="getImages" parameterType="integer" resultType="kh.hello.dto.ProjectImageDTO">
		select * from projectImage where projectSeq=#{value}
	</select>	
	<delete id="deleteImage">
		delete from projectImage where sysName=#{value}
	</delete>	
	<update id="updateProjectViewCount">
		update project set viewCount=viewCount+1 where seq=#{value}
	</update>	
	<delete id="deleteProject">
		delete from project where seq=#{value}
	</delete>	
	<delete id="deleteImagesByProjectSeq">
		delete from projectImage where projectSeq=#{value}
	</delete>	
	<update id="closeProject">
		update project set state='Y' where seq=#{value}
	</update>	
	
	
	<update id="updatePoint" parameterType="java.util.Map">
		update member set point=point+#{point} where id=#{id}
	</update>	
	<update id="checkPoint">
		update member set memLevel=1 where id=#{value} and point &lt; 0
	</update>
	<insert id="insertImage" parameterType="kh.hello.dto.ProjectImageDTO">
		insert into projectImage values(projectImageSeq.nextval,#{projectSeq},#{oriName},#{sysName})
	</insert>	
	<select id="scrapCheck" parameterType="java.util.Map" resultType="integer">
		select count(*) from scrap where id=#{id} and category='project' and categorySeq=#{categorySeq} 
	</select>	
	<insert id="scrap" parameterType="java.util.Map">
		insert into scrap values(scrapSeq.nextval,#{id},'project',#{categorySeq})
	</insert>	
	<delete id="unScrap" parameterType="java.util.Map">
		delete from scrap where id=#{id} and category='project' and categorySeq=#{categorySeq}
	</delete>
			
	<select id="getMakeArticleCount" resultType="integer">
		select count(*) from project where id=#{id}
		<if test="searchOption!=null">
			<include refid="searchAnd"></include>
		</if>
	</select>	
	<select id="getPLogMakeListByPage" resultType="kh.hello.dto.ProjectDTO">
		select * from (select
		project.seq, state, nvl(totalApply,0) as totalApply, nvl(totalApprove,0) as totalApprove, capacity, startDate, endDate, title, nonTagContents, project.writeDate, viewCount, nvl(commentCount,0) as commentCount, row_number() over (order by project.seq desc) as num from project
		left outer join (select projectSeq, count(*) as totalApply, count(decode(approve,'O',1)) totalApprove from projectApply group by projectSeq) pa on pa.projectSeq = project.seq
		left outer join (select projectSeq, count(*) as commentCount from projectComment
		where contents is not null group by projectSeq) pc
		on project.seq = pc.projectSeq where project.id = #{id}
		<if test="searchOption!=null">
			<include refid="searchAnd"></include>
		</if>
		) where num between #{start} and #{end} 
	</select>	
	
	<select id="getApplyArticleCount" resultType="integer">
		select count(*) from projectApply, project where projectApply.id=#{id} and projectApply.projectSeq = project.seq
		<if test="searchOption!=null">
			<include refid="searchAnd"></include>
		</if>
	</select>	
	<select id="getPLogApplyListByPage" resultType="kh.hello.dto.ProjectPLogDTO">		
		select * from (select
		projectApply.seq, projectApply.projectSeq, state, title, nonTagContents, project.writer, projectApply.leaderId, location1, location2, startDate, endDate, capacity, approve, projectApply.writeDate, nvl(commentCount,0) as commentCount, row_number() over (order by projectApply.seq desc) as num from project
		inner join projectApply on project.seq = projectApply.projectSeq
		left outer join (select projectSeq, count(*) as commentCount from projectComment
		where contents is not null group by projectSeq) pc
		on project.seq = pc.projectSeq where projectApply.id = #{id}
		<if test="searchOption!=null">
			<include refid="searchAnd"></include>
		</if>		
		)
		where num between #{start} and #{end}
	</select>
	
	<sql id="searchAnd">
		<choose>
			<when test="searchOption=='all'">
				and (lower(title) like lower('%'||#{keyword}||'%')
				or lower(nonTagContents) like lower('%'||#{keyword}||'%'))
			</when>
			<when test="searchOption=='location'">
				and (location1 like '%'||#{keyword}||'%'	
				or location2 like '%'||#{keyword}||'%')
			</when>
			<when test="searchOption=='writer'">
				and lower(project.writer) like lower('%'||#{keyword}||'%')
			</when>
			<otherwise>
				and lower(${searchOption}) like lower('%'||#{keyword}||'%')
			</otherwise>
		</choose>
	</sql>
	
	<select id="reportDuplCheck" resultType="integer" parameterType="java.util.Map">
		select count(*) from reportedBoard where reporterID=#{id} and boardName='Project' and boardSeq=#{seq}
	</select>
	<insert id="insertReport" parameterType="kh.hello.dto.ReportDTO">
		insert into reportedBoard values(reportedBoardSeq.nextval, 'N', 'Project', #{boardSeq}, #{title}, #{reporterNick}, #{reporterID} , sysdate, #{reason}, null)
	</insert>
	

</mapper>