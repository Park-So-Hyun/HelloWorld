<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Code">
	<insert id="insert" parameterType="kh.hello.dto.CodeQuestionDTO">
		insert into codeQuestion
		values(#{seq},#{division},#{title},#{content},#{id},#{writer},#{point},0,sysdate,#{nonTagContents})
	</insert>
	<select id="selectQuestionAll" resultType="kh.hello.dto.CodeQuestionDTO">
		select codeQuestion.*,(select count(*) from codeReply where queSeq=codeQuestion.seq) as replyCount from (select codeQuestion.*, row_number() over(order by seq desc) rown from codeQuestion) codeQuestion where rown between #{start} and #{end} order by seq desc
	</select>
	
<!-- 	<select id="selectAll" resultType="kh.hello.dto.CodeQuestionDTO"> -->
<!-- 		select codeQuestion.*,(select count(*) from codeReply where queSeq=codeQuestion.seq) as replyCount from codeQuestion order by seq desc -->
<!-- 	</select> -->
	
<!-- 	<select id="selectQuestionAll" resultType="kh.hello.dto.CodeQuestionDTO"> -->
<!-- 		select * from (select codeQuestion.*, row_number() over(order by seq desc) rown from codeQuestion) where rown between 1 and 10 -->
<!-- 	</select> -->
	
	<select id="codeQuestionCount" resultType="Integer">
  		select count(*) from codeQuestion
  	</select>
  	
<!-- 	<select id="selectSeq" parameterType="String" resultType="Integer"> -->
<!-- 		select max(seq) from codeQuestion where id = #{id} -->
<!-- 	</select> -->
	
	<select id="detailQuestion" resultType="kh.hello.dto.CodeQuestionDTO">
		select codeQuestion.*, profileImg from codeQuestion inner join member on codeQuestion.id = member.id where seq = #{value} order by 1 desc
	</select>
	
	<update id="incrementViewCount" parameterType="Integer">
		update codeQuestion set viewCount = viewCount+1 where seq = #{seq}
	</update>
	
	<delete id="delete" parameterType="Integer">
		delete from codeQuestion where seq=#{seq}
	</delete>
	
	<update id="modify" parameterType="kh.hello.dto.CodeQuestionDTO">
		update codeQuestion set division=#{division},title=#{title},content=#{content},point=#{point},nonTagContents=#{nonTagContents} where seq=#{seq}
	</update>
	
	<update id="writePoint" parameterType="String">
		update member set point=point+10 where id=#{id}
	</update>
	
	<update id="deleteWritePoint" parameterType="String">
		update member set point=point-15 where id=#{id}
	</update>
	
<!-- 	실무자 비실무자 강등자 -->
	<select id="getMemLevel" parameterType="String" resultType="integer">
		select memLevel from member where id=#{id}
	</select>
	
<!-- 	포인트 음수되면 멤버등급 1로 -->
	<update id="downLevel">
		update member set memlevel=1 where <![CDATA[point<0]]>
	</update>
	
	<!-- 조건별 게시판목록 검색 -->
	<select id="codeSearchTotalCount" parameterType="java.util.Map" resultType="integer">
		 select count(seq) from codeQuestion
		 <choose>
		 <when test="value == 'all'">								
			 where (upper(division) like upper('%${search}%')) or (upper(writer) like upper('%${search}%')) or (upper(nonTagContents) like upper('%${search}%')) or (upper(title) like upper('%${search}%')) 
		</when>
		<when test="value == 'division'">								
			 where (upper(division) like upper('%${search}%')) 
		</when>
		<when test="value == 'title'">								
			 where (upper(title) like upper('%${search}%')) 
		</when>
		<when test="value == 'content'">								
			 where (upper(nonTagContents) like upper('%${search}%')) 
		</when>
		<when test="value == 'writer'">								
			 where (upper(writer) like upper('%${search}%'))
		</when>
		</choose>
	</select>
	
<!-- 	<select id="codeSearchByPage" resultType="kh.hello.dto.CodeQuestionDTO" parameterType="java.util.Map"> -->
<!-- 		select *  -->
<!-- 		<choose> -->
<!-- 		 <when test="value == 'all'">								 -->
<!-- 			 from (select codeQuestion.*, row_number() over (order by seq desc) as rown from codeQuestion where (division like '%${search}%') or (writer like '%${search}%') or (title like '%${search}%')) where rown between #{start} and #{end} -->
<!-- 		</when> -->
<!-- 		<when test="value == 'division'"> -->
<!-- 			 from (select codeQuestion.*, row_number() over (order by seq desc) as rown from codeQuestion where (division like '%${search}%')) where rown between #{start} and #{end}						 -->
<!-- 		</when> -->
<!-- 		<when test="value == 'writer'"> -->
<!-- 			 from (select codeQuestion.*, row_number() over (order by seq desc) as rown from codeQuestion where (writer like '%${search}%')) where rown between #{start} and #{end}						 -->
<!-- 		</when> -->
<!-- 		<when test="value == 'title'">								 -->
<!-- 			 from (select codeQuestion.*, row_number() over (order by seq desc) as rown from codeQuestion where (title like '%${search}%')) where rown between #{start} and #{end} -->
<!-- 		</when> -->
<!-- 		</choose> -->
<!-- 	</select> -->
	
	<select id="codeSearchByPage" resultType="kh.hello.dto.CodeQuestionDTO" parameterType="java.util.Map">
		select *
		<choose>
		 <when test="value == 'all'">								
			 from (select codeQuestion.*, row_number() over(order by seq desc) rown,(select count(*) from codeReply where queSeq=codeQuestion.seq) as replyCount from codeQuestion where (upper(division) like upper('%${search}%')) or (upper(writer) like upper('%${search}%')) or (upper(nonTagContents) like upper('%${search}%')) or (upper(title) like upper('%${search}%'))) where rown between #{start} and #{end} order by seq desc
		</when>
		<when test="value == 'division'">
			 from (select codeQuestion.*, row_number() over(order by seq desc) rown,(select count(*) from codeReply where queSeq=codeQuestion.seq) as replyCount  from codeQuestion where (upper(division) like upper('%${search}%'))) where rown between #{start} and #{end}						
		</when>
		<when test="value == 'title'">								
			 from (select codeQuestion.*, row_number() over(order by seq desc) rown,(select count(*) from codeReply where queSeq=codeQuestion.seq) as replyCount  from codeQuestion where (upper(title) like upper('%${search}%'))) where rown between #{start} and #{end}
		</when>
		<when test="value == 'content'">								
			 from (select codeQuestion.*, row_number() over(order by seq desc) rown,(select count(*) from codeReply where queSeq=codeQuestion.seq) as replyCount  from codeQuestion where (upper(nonTagContents) like upper('%${search}%'))) where rown between #{start} and #{end}
		</when>
		<when test="value == 'writer'">
			 from (select codeQuestion.*, row_number() over(order by seq desc) rown,(select count(*) from codeReply where queSeq=codeQuestion.seq) as replyCount  from codeQuestion where (upper(writer) like upper('%${search}%'))) where rown between #{start} and #{end}						
		</when>
		</choose>
	</select>
	
	<!-- 	이미지 업로드 -->
	<select id="getCodeSeq" resultType="integer">
		select codeQuestionSeq.nextval from dual
	</select>
	<insert id="insertImg" parameterType="java.util.Map">
		insert into codeImgs values(codeImgsSeq.nextVal, #{queSeq}, #{fileName})
	</insert>
	
<!-- 	스크랩 -->
	<select id="scrapDupCheck" parameterType="kh.hello.dto.ScrapDTO" resultType="integer">
		select count(*) from scrap where id=#{id} and category=#{category} and categorySeq=#{categorySeq}
	</select>
	
	<select id="earlierSeq" resultType="integer">
		select scrapSeq.nextval from dual
	</select>
	
	<insert id="scrapCode">
		insert into scrap values(#{seq}, #{id}, #{category}, #{categorySeq})
	</insert>
	
<!-- 신고 -->
	<select id="reportDuplCheck" resultType="integer" parameterType="java.util.Map">
		select count(*) from reportedBoard where reporterID=#{id} and boardName='CohowQ' and boardSeq=#{seq}
	</select>
	<insert id="insertReport" parameterType="kh.hello.dto.ReportDTO">
		insert into reportedBoard values(reportedBoardSeq.nextval, 'N', 'CohowQ', #{boardSeq}, null,#{title}, #{reporterNick}, #{reporterID} , sysdate, #{reason}, null)
	</insert>
</mapper>