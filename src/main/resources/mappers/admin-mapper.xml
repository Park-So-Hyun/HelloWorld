<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Admin">
  <select id="validLogin" resultType="integer">
  	select count(*) from adminAccount where adminId=#{adminId} and password=#{password}
  </select>
  <select id="getAdminEmail" resultType="String">
  	select email from adminAccount where adminId=#{adminId}
  </select>
  <update id="modifyInfo" parameterType="java.util.Map">
  	update adminAccount set password=#{password}, email=#{email} where adminId=#{adminId}
  </update>
  <select id="selectInquiryByPage" resultType="kh.hello.dto.InquiryDTO">
  	select * from (select inquiry.*, row_number() over(order by seq desc) rown from inquiry) where rown between #{start} and #{end}
  </select>
  <select id="getInquiryTotal" resultType="integer">
  	select count(*) from inquiry
  </select>
  <select id="inquiryDetailView" resultType="kh.hello.dto.InquiryDTO">
  	select * from inquiry where seq=#{seq}
  </select>
  <insert id="writeInquiry" parameterType="java.util.Map">
  	insert into inquiryReply values (inquiryReplySeq.nextval, #{boardSeq}, #{reply}, sysdate)
  </insert>
  <update id="plusInquiryCount">
  	update inquiry set count=count+1 where seq=#{seq}
  </update>
  <select id="getLatestReplySeq" resultType="integer">
  	select max(seq) from inquiryReply
  </select>
  <select id="getLatestReply" resultType="kh.hello.dto.InquiryReplyDTO">
  	select * from inquiryReply where seq=#{seq}
  </select>
  <select id="getInquiryReply" resultType="kh.hello.dto.InquiryReplyDTO">
  	select * from inquiryReply where boardSeq=#{boardSeq} order by seq
  </select>
  <delete id="deleteInquiryReply" parameterType="integer">
  	delete from inquiryReply where seq=#{seq}
  </delete>
    <update id="minusInquiryCount">
  	update inquiry set count=count-1 where seq=#{seq}
  </update>
  <select id="memberListByPage" resultType="kh.hello.dto.MemberDTO">
  	select * from (select member.*, row_number() over(order by name) rown from member where pw is not null) where rown between #{start} and #{end}
  </select>
  <select id="getMemberTotal" resultType="integer">
  	select count(*) from member where pw is not null
  </select>
  <select id="getMemberInfo" resultType="kh.hello.dto.MemberDTO">
  	select * from member where id=#{member}
  </select>
  <update id="memberModify" parameterType="java.util.Map">
  	update member set email=#{email}, phone=#{phone} where id=#{id}
  </update>
  <update id="memberStop">
  	update member set memLevel='1' where id=#{id}
  </update>
  <update id="memberStart">
  	update member set memLevel='2' where id=#{id}
  </update>
  <update id="memberOut">
  	update member set pw=null, name=null,phone=null,postCode=null
		,addr1=null,addr2=null,joinPath=null,gender=null,memLevel=null,reportCount=null,point=null
		,ifmOpenCheck=null,joinDate=null,lastLogin=null,birth=null where id=#{id} 
  </update>
  <select id="getEmailById" resultType="String">
  	select email from member where id=#{id}
  </select>
  <insert id="memberOutList" parameterType="java.util.Map">
  	insert into forcedOut values(forcedOutSeq.nextval, #{id}, #{email}, #{reason}, sysdate)
  </insert>
  <update id="memberUp">
  	update member set memLevel='3' where id=#{id}
  </update>
  <select id="forcedOutListByPage" resultType="kh.hello.dto.ForcedOutMemberDTO">
  	select * from (select forcedOut.*, row_number() over(order by outDate desc) rown from forcedOut) where rown between #{start} and #{end}
  </select>
  <select id="getForcedOutTotal" resultType="integer">
  	select count(*) from forcedOut
  </select>
  <update id="delEmail">
  	update member set email=null where id=(select id from forcedOut where seq=#{seq})
  </update>
  <delete id="forcedOutDel">
  	delete from forcedOut where seq=#{seq}
  </delete>
  <select id="getSearchMemberListByPage" resultType="kh.hello.dto.MemberDTO">
  	select * from (select member.*, row_number() over(order by name) rown from member where ${col} like #{searchWord} and pw is not null) where rown between #{start} and #{end}
  </select>
  <select id="getSearchMemberResultTotal" resultType="integer">
  	select count(*) from member where ${col} like #{searchWord} and pw is not null
  </select>
  <select id="getBlackList" resultType="kh.hello.dto.MemberDTO">
  	select * from member where (point&lt;=0 or memLevel=1) and pw is not null
  </select>
  <select id="getBlackListTotal" resultType="integer">
  	select count(*) from member where (point&lt;=0 or memLevel=1) and pw is not null
  </select>
  <select id="getSearchBlackListByPage" resultType="kh.hello.dto.MemberDTO">
  	select * from (select member.*, row_number() over(order by name) rown from member where ${col} like #{searchWord} and pw is not null) where rown between #{start} and #{end} and (point&lt;=0 or memLevel=1)
  </select>
  <select id="getSearchBlackResultTotal" resultType="integer">
  	select count(*) from member where ${col} like #{searchWord} and (point&lt;=0 or memLevel=1) and pw is not null
  </select>
  <select id="noticeMainListByPage" resultType="kh.hello.dto.NoticeDTO">
  	select * from (select notice.*, row_number() over(order by seq desc) rown from notice) where rown between #{start} and #{end}
  </select>
  <select id="getNoticeTotal" resultType="integer">
  	select count(*) from notice
  </select>
  <insert id="insertImg">
  	insert into noticeImg values(noticeImgSeq.nextval, #{boardSeq}, #{sysName})
  </insert>
  <select id="getNoticeSeq" resultType="integer">
  	select noticeSeq.nextval from dual
  </select> 
  <insert id="writeNotice">
  	insert into notice values(#{seq}, #{title}, #{content}, sysdate, 0, #{nonTagContent})
  </insert>
  <select id="noticeDetailView" resultType="kh.hello.dto.NoticeDTO">
  	select * from notice where seq=#{seq}
  </select>
  <update id="modifyNotice">
  	update notice set title=#{title}, content=#{content}, writeDate=sysdate, nonTagContent=#{nonTagContent} where seq=#{seq}
  </update>
  <delete id="deleteNotice">
  	delete from notice where seq=#{seq}
  </delete>
  <select id="getImgsByBoardSeq" resultType="String">
  	select sysName from noticeImg where boardSeq=#{boardSeq}
  </select>
  <delete id="delImgsByBoardSeq">
  	delete from noticeImg where boardSeq=#{boardSeq}
  </delete>
  <select id="validOpen" resultType="String">
  	select ifmOpenCheck from member where id=#{id}
  </select>
  <update id="ifmOpenModify">
  	update member set
  		<choose>
  			<when test='check == "Y"'>
  				ifmOpenCheck='N'
  			</when>
  			<otherwise>
  				ifmOpenCheck='Y'
  			</otherwise>
  		</choose>
  	where id=#{id}
  </update>
</mapper>